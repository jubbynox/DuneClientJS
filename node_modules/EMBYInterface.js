"use strict";
var sha1 = require('sha1');
var fs = require('fs'); //filesystem
var request = require('request');
var WebSocketClient = require('websocket').client;
var EMBYInterface = function(authenticationParameters, embyClient) { //embyClient is an instance of the dune interface...but techincally could be any interface
  this.isRun = false;
  this.setClassVariables(authenticationParameters, embyClient);
}
EMBYInterface.prototype.setClassVariables = function(authenticationParameters, embyClient) {
  var self = this;
  this.embyClient = embyClient;
  this.embyClient.setErrorCallback(function(reason) {
      self.clientError(reason);
  });
  this.host = authenticationParameters.Server.IP + ":" + authenticationParameters.Server.PORT;
  this.hostM = this.host + "/mediabrowser";
  this.userId = "";
  this.EMBYPassword = authenticationParameters.Server.PASSWORD;
  this.deviceId = embyClient.getDeviceId();
  this.client = embyClient.getClientName();
  this.version = embyClient.getClientVersion();
  this.device = embyClient.getDeviceName();
  this.webSocket;
}
EMBYInterface.prototype.isRunning = function() {
  return this.isRun;
}
EMBYInterface.prototype.testConnection = function(callback) {
  request({
    url: "http://" + this.hostM + '/Users/public?format=json',
    method: 'get',
    json: true
  }, function(err, res, body) {
    if (err) {
      callback(err);
    } else {
      callback("Success!");
    }
  });
}
EMBYInterface.prototype.sendUpdate = function(position, typeProgress, itemId, header, hostM) {
  if (itemId) {
    var url = "";
    var state = null;
    var paused = false;
    switch(typeProgress) {
        case 'PLAYING':
            state = 'Progress';
            paused = false;
            break;
        case 'PAUSED':
            state = 'Progress';
            paused = true;
            break;
        case 'STOPPED':
            state = 'Stopped';
            break;
    }
    if (state != null) {
      url = "http://" + hostM + "/Sessions/Playing/" + state + "?format=json";
        var content = {
          "itemId": itemId,
          "canSeek": true,
          "MediaSourceId": itemId,
          "PositionTicks": position,
          "IsPaused": paused
        };
        request({
          url: url,
          method: 'post',
          json: content,
          headers: header,
        }, function(err, res, body) {});
    }
  }
}
EMBYInterface.prototype.setClient = function(embyClient) {
  this.embyClient = embyClient;
}
EMBYInterface.prototype.setAuthentication = function(authenticationParameters) {
  this.setClassVariables(authenticationParameters, this.embyClient);
}
EMBYInterface.prototype.launch = function(successCallback, errorCallback) {
  var self = this;
  self.successCallBack = successCallback;
  self.errorCallback = errorCallback;
  if (!this.embyClient) {
      errorCallback("Must include an Emby Client!");
  }
  self.isRun = true;
  request({
    url: "http://" + self.hostM + '/Users/public?format=json',
    method: 'get',
    json: true
  }, function(err, res, body) {
    if (err) {
        errorCallback(err);
    } else {
      self.getUserIDs(body);
    }
  });
}
EMBYInterface.prototype.getUserIDs = function(body) {
  this.userId = body[0].Id;
  this.header = {
    "Authorization": 'MediaBrowser UserId="' + this.userId + '", Client="' + this.client + '", Device="' + this.device + '", DeviceId="' + this.deviceId + '", Version="' + this.version + '"',
    "content-type": "application/json"
  };
  var defaultName = body[0].Name;
  this.authenticate(defaultName, this.userId);
}
EMBYInterface.prototype.authenticate = function(name) {
  var self = this;
  var content = {
    username: name,
    password: sha1(self.EMBYPassword)
  };
  var url = "http://" + self.hostM + "/Users/AuthenticateByName?format=json";
  request({
    url: url,
    method: 'post',
    json: content,
    headers: self.header,
  }, function(err, res, body) {
    self.getAccessToken(err, res, body);
  });

}

EMBYInterface.prototype.getAccessToken = function(err, res, body) { //retreives access token and gets session attributes
  var self = this;
  if (err || !body) {
    console.log(err);
  } else {
    var accessToken = body.AccessToken; //used to be res.body
    var url = "http://" + self.hostM + "/Sessions?DeviceId=" + self.deviceId + "&format=json";
    //var header=getHeader(userId);
    self.header["X-MediaBrowser-Token"] = accessToken;
    request({
      url: url,
      method: 'get',
      headers: self.header,
      json: true
    }, function(err, res, body) {
      self.clientInterface(err, res, body, accessToken);
    });
  }


}
EMBYInterface.prototype.setSession = function(accessToken) {
  //var header=getHeader(userId);
  var self = this;
  this.header["X-MediaBrowser-Token"] = accessToken;
  var url = "http://" + self.hostM + "/Sessions/Capabilities/Full"; //?format=json";
  var supportedCommands = "Play,Playstate,SendString,DisplayMessage,PlayNext";
  var playableMediaTypes = "Audio,Video";
  var content = {
    "PlayableMediaTypes": playableMediaTypes,
    "SupportedCommands": supportedCommands,
    "SupportsMediaControl": true
  };
  request({
    url: url,
    method: 'post',
    json: content,
    headers: self.header
  }, function(err, res, body) {
    if (!err) {
      self.successCallBack("Success");
    } else {
      self.successCallBack(err);
    }
  });
}

EMBYInterface.prototype.handleServerMessage = function(message, accessToken) {
  var self = this;
  switch (message.MessageType) {
    case 'Play':
      if (message.Data.PlayCommand === 'PlayNow') {
        self.embyClient.playMedia(message.Data, function(itemId, userId, callback) {
          return self.getDetailedItemInfo(itemId, userId, accessToken, callback);
        }, function(position, typeProgress, itemId) {
          self.sendUpdate(position, typeProgress, itemId, self.header, self.hostM);
        }, function(itemId) {
            return self.getMp4Url(itemId);
        }); //may have to wrap sendUpdate...
      }
      break;
    case 'Playstate':
      switch (message.Data.Command) {
        case 'Stop':
          self.embyClient.stop();
          break;
        case 'NextTrack':
          self.embyClient.next();
          break;
        case 'PreviousTrack':
          self.embyClient.prev();
          break;
        case 'PlayPause':
          self.embyClient.playPause();
          break;

      }
      break;
    case 'ServerRestarting':
      self.reconnect();
      break;
    case 'ServerShuttingDown':
      self.reconnect();
      break;
  }
}

EMBYInterface.prototype.getDetailedItemInfo = function(itemId, userId, accessToken, callback) {
  //var host=ip+":"+port;
  var url = "http://" + this.hostM + "/Items?Ids=" + itemId + "&Fields=path,MediaStreams&format=json"; //just to see what kind of file it is (video or music)
  //var url = "http://" + this.hostM + "/Items?itemId=" + itemId + "&fields=path,MediaStreams&format=json"; //just to see what kind of file it is (video or music)
  //var header=getHeader(userId);
  this.header["X-MediaBrowser-Token"] = accessToken;
  request({
    url: url,
    method: 'get',
    json: true,
    headers: this.header
  }, callback);
}

EMBYInterface.prototype.getMp4Url = function(itemId) {
    
    //return `http://${this.hostM}/Videos/${itemId}/stream.mp4`;
    return `http://${this.hostM}/Videos/${itemId}/stream.mp4?VideoCodec=H264`;
    /*var url = "http://" + this.hostM + "/Items/" + itemId + "/Playbackinfo";
  this.header["X-MediaBrowser-Token"] = accessToken;
  request({
    url: url,
    method: 'post',
    json: true,
    headers: this.header
  }, callback);*/
}


EMBYInterface.prototype.clientInterface = function(err, res, body, accessToken) {
  this.webSocket = new WebSocketClient();
  var self = this;
  this.webSocket.on('connectFailed', function(error) {
    self.reconnect(error);
  });
  this.webSocket.on('connect', function(connection) {
    self.setSession(accessToken);
    connection.on('error', function(error) {
        self.reconnect(error);
    });
    connection.on('close', function() { //likely that the server restarted
        self.reconnect();
    });
    connection.on('message', function(message) {
      message = JSON.parse(message.utf8Data);
      self.handleServerMessage(message, accessToken);

    });
  });
  this.webSocket.connect("ws://" + self.hostM + "?api_key=" + accessToken + "&deviceId=" + self.deviceId, null);
}

EMBYInterface.prototype.clientError = function(errMessage) {
    
    console.error(errMessage);
}

EMBYInterface.prototype.reconnect = function(error) {
    
    setTimeout(function () {
        self.launch(self.successCallBack, self.errorCallback);
    }, 1000); 
}

module.exports = EMBYInterface;
